Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression B_OP expression
Rule 2     expression -> U_OP expression
Rule 3     expression -> ( expression )
Rule 4     expression -> FIELD COMPA value
Rule 5     value -> STRING
Rule 6     value -> LIST
Rule 7     value -> NUMBER
Rule 8     value -> DATE

Terminals, with rules where they appear

(                    : 3
)                    : 3
B_OP                 : 1
COMPA                : 4
DATE                 : 8
FIELD                : 4
LIST                 : 6
NUMBER               : 7
STRING               : 5
U_OP                 : 2
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 3 0
value                : 4

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression B_OP expression
    (2) expression -> . U_OP expression
    (3) expression -> . ( expression )
    (4) expression -> . FIELD COMPA value

    U_OP            shift and go to state 1
    (               shift and go to state 2
    FIELD           shift and go to state 3

    expression                     shift and go to state 4

state 1

    (2) expression -> U_OP . expression
    (1) expression -> . expression B_OP expression
    (2) expression -> . U_OP expression
    (3) expression -> . ( expression )
    (4) expression -> . FIELD COMPA value

    U_OP            shift and go to state 1
    (               shift and go to state 2
    FIELD           shift and go to state 3

    expression                     shift and go to state 5

state 2

    (3) expression -> ( . expression )
    (1) expression -> . expression B_OP expression
    (2) expression -> . U_OP expression
    (3) expression -> . ( expression )
    (4) expression -> . FIELD COMPA value

    U_OP            shift and go to state 1
    (               shift and go to state 2
    FIELD           shift and go to state 3

    expression                     shift and go to state 6

state 3

    (4) expression -> FIELD . COMPA value

    COMPA           shift and go to state 7


state 4

    (0) S' -> expression .
    (1) expression -> expression . B_OP expression

    B_OP            shift and go to state 8


state 5

    (2) expression -> U_OP expression .
    (1) expression -> expression . B_OP expression

    B_OP            reduce using rule 2 (expression -> U_OP expression .)
    $end            reduce using rule 2 (expression -> U_OP expression .)
    )               reduce using rule 2 (expression -> U_OP expression .)

  ! B_OP            [ shift and go to state 8 ]


state 6

    (3) expression -> ( expression . )
    (1) expression -> expression . B_OP expression

    )               shift and go to state 9
    B_OP            shift and go to state 8


state 7

    (4) expression -> FIELD COMPA . value
    (5) value -> . STRING
    (6) value -> . LIST
    (7) value -> . NUMBER
    (8) value -> . DATE

    STRING          shift and go to state 11
    LIST            shift and go to state 10
    NUMBER          shift and go to state 12
    DATE            shift and go to state 13

    value                          shift and go to state 14

state 8

    (1) expression -> expression B_OP . expression
    (1) expression -> . expression B_OP expression
    (2) expression -> . U_OP expression
    (3) expression -> . ( expression )
    (4) expression -> . FIELD COMPA value

    U_OP            shift and go to state 1
    (               shift and go to state 2
    FIELD           shift and go to state 3

    expression                     shift and go to state 15

state 9

    (3) expression -> ( expression ) .

    B_OP            reduce using rule 3 (expression -> ( expression ) .)
    $end            reduce using rule 3 (expression -> ( expression ) .)
    )               reduce using rule 3 (expression -> ( expression ) .)


state 10

    (6) value -> LIST .

    B_OP            reduce using rule 6 (value -> LIST .)
    $end            reduce using rule 6 (value -> LIST .)
    )               reduce using rule 6 (value -> LIST .)


state 11

    (5) value -> STRING .

    B_OP            reduce using rule 5 (value -> STRING .)
    $end            reduce using rule 5 (value -> STRING .)
    )               reduce using rule 5 (value -> STRING .)


state 12

    (7) value -> NUMBER .

    B_OP            reduce using rule 7 (value -> NUMBER .)
    $end            reduce using rule 7 (value -> NUMBER .)
    )               reduce using rule 7 (value -> NUMBER .)


state 13

    (8) value -> DATE .

    B_OP            reduce using rule 8 (value -> DATE .)
    $end            reduce using rule 8 (value -> DATE .)
    )               reduce using rule 8 (value -> DATE .)


state 14

    (4) expression -> FIELD COMPA value .

    B_OP            reduce using rule 4 (expression -> FIELD COMPA value .)
    $end            reduce using rule 4 (expression -> FIELD COMPA value .)
    )               reduce using rule 4 (expression -> FIELD COMPA value .)


state 15

    (1) expression -> expression B_OP expression .
    (1) expression -> expression . B_OP expression

    B_OP            reduce using rule 1 (expression -> expression B_OP expression .)
    $end            reduce using rule 1 (expression -> expression B_OP expression .)
    )               reduce using rule 1 (expression -> expression B_OP expression .)

  ! B_OP            [ shift and go to state 8 ]

